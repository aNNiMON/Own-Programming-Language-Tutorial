use std, functional, math

def testStream() {
  data = [1,2,3,4,5,6,7]
  result = stream(data)
    .filter(def(x) = x <= 4)
    .sortBy(def(x) = -x)
    .map(def(x) = x * 2)
    .toArray()
  assertEquals([8,6,4,2], result)
}

def testFilter() {
  data = [1,2,3,4,5,6,7]
  assertEquals([2, 4, 6], stream(data).filter(def(x) = x % 2 == 0).toArray())
}

def testFilterNot() {
  data = [1,2,3,4,5,6,7]
  assertEquals([1, 3, 5, 7], stream(data).filterNot(def(x) = x % 2 == 0).toArray())
}

def testSkip() {
  data = [1,2,3,4,5,6,7]
  assertEquals(7, stream(data).skip(0).count())
  assertEquals(5, stream(data).skip(2).count())
  assertEquals(0, stream(data).skip(7).count())
  assertEquals(0, stream(data).skip(20).count())
}

def testLimit() {
  data = [1,2,3,4,5,6,7]
  assertEquals(0, stream(data).limit(0).count())
  assertEquals(2, stream(data).limit(2).count())
  assertEquals(7, stream(data).limit(7).count())
  assertEquals(7, stream(data).limit(20).count())
}

def testTakeWhile() {
  data = [2,4,6,5,6,7,8]
  assertEquals([2, 4, 6], stream(data).takeWhile(def(x) = x % 2 == 0).toArray())
  assertEquals(0, stream(data).takeWhile(def(x) = x % 2 != 0).count())
}

def testDropWhile() {
  data = [2,4,6,5,6,7,8]
  assertEquals([5, 6, 7, 8], stream(data).dropWhile(def(x) = x % 2 == 0).toArray())
  assertEquals(data, stream(data).dropWhile(def(x) = x % 2 != 0).toArray())
}

def testCustom() {
  data = [2,4,6,5]
  assertEquals([5,6,4,2], stream(data).custom(::reverse).toArray())
}

def testJoining() {
  data = [1,2,3,4]
  assertEquals("1234", stream(data).joining())
  assertEquals("1-2-3-4", stream(data).joining("-"))
  assertEquals("<1-2-3-4>", stream(data).joining("-", "<", ">"))
}

def testPeek() {
  data = [2,3,4,5,6,7]
  expected = [2,4,6]
  index = 0

  actual = stream(data)
    .filter(def(x) = x % 2 == 0)
    .peek(def(x) = assertEquals(expected[index++], x))
    .toArray()
  assertEquals(expected, actual)
  assertEquals(length(expected), index)
}

def testSorted() {
  data = [-2,4,6,-5,6,3,-8]
  assertEquals([-8,-5,-2,3,4,6,6], stream(data).sorted().toArray())
  assertEquals([-2,3,4,-5,6,6,-8], stream(data).sorted(def(a,b) = abs(a) - abs(b)).toArray())
}

def testForEachArrayIndexed() {
  data = [1, 2, 3]
  sum = 0
  stream(data)
    .forEachIndexed(def(v, index) {
      sum += (v * index)
    })
  assertEquals(1 * 0 + 2 * 1 + 3 * 2, sum)
}

def testForEachMapIndexed() {
  data = {"a": "1", "b": 2}
  result = ""
  stream(data)
    .sorted()
    .forEachIndexed(def(entry, index) {
      extract(key, value) = entry
      result += "" + key + value + index
    })
  assertEquals("a10b21", result)
}

def reverse(container) {
  size = length(container)
  result = newarray(size)
  for i : range(size) {
    result[size - i - 1] = container[i]
  }
  return result
}